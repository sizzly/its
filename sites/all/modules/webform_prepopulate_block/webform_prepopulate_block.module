<?php

/**
 * @file
 *
 * Developed by Gabor Szanto.
 *  hello@szantogabor.com
 *  http://szantogabor.com
 */

define("WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX", 'webform_prepopulate_block_');

/**
 * Implements hook_form().
 */
function webform_prepopulate_block_forms() {
  $forms = array();
  if ($blocks = _webform_prepopulate_block_variable_get()) {
    foreach (array_keys($blocks) as $block) {
      $forms["webform_prepopulate_block_block_form_$block"]['callback'] = 'webform_prepopulate_block_block_form';
    }
  }
  return $forms;
}

/**
 * Implements hook_form_alter().
 */
function webform_prepopulate_block_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_prepopulate_block_form_webform_component_edit_form_alter(&$form, &$form_state) {
  $component = $form_state['build_info']['args'][1];
  if (in_array($form['type']['#value'], _webform_prepopulate_block_get_enabled_types())) {
    $form['display']['prepopulate_block'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add to prepopulate block'),
      '#default_value' => isset($component['extra']['prepopulate_block']) ? $component['extra']['prepopulate_block'] : FALSE,
      '#parents' => array('extra', 'prepopulate_block'),
    );
    $form['#submit'][] = 'webform_prepopulate_block_webform_component_edit_form_submit';
  }
}

function webform_prepopulate_block_webform_component_edit_form_submit($form, &$form_state) {
  $var = WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX . $form_state['values']['nid'];
  $block = variable_get($var, array());
  if ($form_state['values']['extra']['prepopulate_block'] == 1) {
    $block["cid_{$form_state['values']['cid']}"] = $form_state['values']['cid'];
    variable_set($var, $block);
  }
  else {
    if (isset($block["cid_{$form_state['values']['cid']}"])) {
      unset($block["cid_{$form_state['values']['cid']}"]);
      variable_set($var, $block);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function webform_prepopulate_block_block_info() {
  $blocks = array();

  $webform_blocks = _webform_prepopulate_block_variable_get();
  foreach ($webform_blocks as $name => $value) {
    $nid = str_replace(WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX, '', $name);
    $webform_node = node_load($nid);
    $blocks[$name] = array(
      'info' => t('Webform prepopulate block for @title', array('@title' => $webform_node->title)),
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webform_prepopulate_block_block_view($delta = '') {
  $block = array();
  $webform_blocks = _webform_prepopulate_block_variable_get();
  foreach ($webform_blocks as $name => $components) {
    switch ($delta) {
      case $name:
        $nid = str_replace(WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX, '', $name);
        $webform_node = node_load($nid);
        // Return if user has no access to the webform node.
        if (!node_access('view', $webform_node)) {
          return;
        }

        $block['subject'] = $webform_node->title;
        $block['content'] = drupal_get_form("webform_prepopulate_block_block_form_$name", $webform_node, $components);

        break;
    }
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @todo: Is this deprecated?
 */
function webform_prepopulate_block_form_webform_client_form_alter(&$form, &$form_state) {
  if (isset($form['#node']->webform_prepopulate_block) && $form['#node']->webform_prepopulate_block) {
    $form['#submit'] = array('webform_prepopulate_block_webform_submit');
  }
}

/**
 * Build own form for our blocks. Simple render the webform, and pick up
 * components flagged as prepopulate_block.
 * @param $form
 *   Need for form_builder.
 * @param $form_state
 *   Need for form_builder.
 * @param $node
 *   The webform node.
 * @param $components
 *   The components flagged as prepopulate_block.
 *
 * @return array
 */
function webform_prepopulate_block_block_form($form, &$form_state, $node, $components) {
  $form = array('#node' => $node);
  //$form_state['rebuild'] = TRUE;
  webform_node_view($node, 'full');

  foreach (element_children($node->webform['components']) as $key) {
    if (in_array($node->webform['components'][$key]['cid'], $components)) {
      $form_key = $node->webform['components'][$key]['form_key'];
      $form[$form_key] = $node->content['webform']['#form']['submitted'][$form_key];
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => empty($node->webform['submit_text']) ? t('Submit') : t($node->webform['submit_text']),
    '#weight' => 1000,
  );
  $form['#submit'][] = 'webform_prepopulate_block_webform_submit';

  return $form;
}

/**
 * Custom form submit function to redirect to webform node with prepopulated
 * query args.
 */
function webform_prepopulate_block_webform_submit($form, &$form_state) {
  $nid = $form['#node']->nid;
  //$url = url("node/$nid", array('absolute' => TRUE, 'query' => $form_state['input']['submitted']));
  $form_state['redirect'] = url("node/$nid", array(
    'absolute' => TRUE,
    'query' => $form_state['input']['submitted']
  ));
}

/**
 * Helper funcion to get types, in which prepopulate block flag could be set.
 *
 * @return array
 *   A simple array of enabled types.
 */
function _webform_prepopulate_block_get_enabled_types() {
  return array(
    'textfield',
    'select',
    'textarea',
    'number',
  );
}

/**
 * Helper function to get variables built by this module.
 *
 * @param null $nid
 *  A webform node id.
 *
 * @return array|null
 *  An array of variables keyed by its name. If nid exists, only the nid
 *  variable will return.
 */
function _webform_prepopulate_block_variable_get($nid = NULL) {
  if (!is_null($nid)) {
    return variable_get(WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX . $nid, array());
  }
  else {
    $variables = &drupal_static(__FUNCTION__);
    if (!empty($variables)) {
      return $variables;
    }
    $variables = array();
    foreach (
      db_select('variable', 'v')
        ->fields('v')
        ->condition('name', db_like(WEBFORM_PREPOPULATE_BLOCK_VARIABLE_PREFIX) . '%', 'LIKE')
        ->execute()
        ->fetchCol() as $name
    ) {
      $variables[$name] = variable_get($name);
    }
  }
  return $variables;
}

